# Ansible EC2 external inventory script settings
#

[ec2]

# to talk to a private eucalyptus instance uncomment these lines
# and edit edit eucalyptus_host to be the host name of your cloud controller
#eucalyptus = True
#eucalyptus_host = clc.cloud.domain.org

# AWS regions to make calls to. Set this to 'all' to make request to all regions
# in AWS and merge the results together. Alternatively, set this to a comma
# separated list of regions. E.g. 'us-east-1,us-west-1,us-west-2'
regions = all
regions_exclude = us-gov-west-1

# When generating inventory, Ansible needs to know how to address a server.
# Each EC2 instance has a lot of variables associated with it. Here is the list:
#   http://docs.pythonboto.org/en/latest/ref/ec2.html#module-boto.ec2.instance
# Below are 2 variables that are used as the address of a server:
#   - destination_variable
#   - vpc_destination_variable

# This is the normal destination variable to use. If you are running Ansible
# from outside EC2, then 'public_dns_name' makes the most sense. If you are
# running Ansible from within EC2, then perhaps you want to use the internal
# address, and should set this to 'private_dns_name'.
destination_variable = public_dns_name

# For server inside a VPC, using DNS names may not make sense. When an instance
# has 'subnet_id' set, this variable is used. If the subnet is public, setting
# this to 'ip_address' will return the public IP address. For instances in a
# private subnet, this should be set to 'private_ip_address', and Ansible must
# be run from with EC2.
vpc_destination_variable = ip_address

# API calls to EC2 are slow. For this reason, we cache the results of an API
# call. Set this to the path you want cache files to be written to. Two files
# will be written to this directory:
#   - ansible-ec2.cache
#   - ansible-ec2.index
cache_path = /tmp

# The number of seconds a cache file is considered valid. After this many
# seconds, a new API call will be made, and the cache file will be updated.
cache_max_age = 300

# Tags whose values are comma delimited lists that should be un-wrapped
# and considered as multiple key=value entries
#
# Thus a tag such as:
#
#   role = webserver,dbserver
#
# Would result in the inventory groups tag_role_webserver
# and tag_role_dbserver being created.
#
# This key is optional
#
# list_value_tags = role,type[,...]

# Specifies how inventory group names should be created from a given
# tag. The template can use the context variables key and value.
# A different template to be specified for each tag thus treated.
# Format:
#
#   <key>:<formatter>[;<key>:<formatter>...]
#
# e.g. the following would replicate existing formatting
#
#   tag_to_group = role:tag_{key}_{value}
#
# The only context variables available are key and value
# This key is optional
# tag_to_group = role:{value}

# When working with multiple VPC you may wish to restrict the inventory
# only to those hosts in the specified VPC. You may also want to restrict
# on other grounds and the include_hosts_by_tag key allows you to
# do this. Supply a tag key and a value and only those
# hosts containing a tag with said key and matching value will be
# included anywhere in the inventory file
# Format:
#
#   <key>:<value>
#
# e.g.
#
#   include_hosts_by_tag = aws_cloudformation_stack-name:MyFirstStack
#
# This key is optional
